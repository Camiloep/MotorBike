// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MotorBike.Models;

#nullable disable

namespace MotorBike.Migrations
{
    [DbContext(typeof(MotorBikeContext))]
    [Migration("20230912140258_NuevaColumnaRegistroUsuario")]
    partial class NuevaColumnaRegistroUsuario
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Discriminator")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Name")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("MotorBike.Models.Categorium", b =>
                {
                    b.Property<int>("IdCategoria")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_categoria");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCategoria"), 1L, 1);

                    b.Property<string>("NombreCategoria")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nombre_categoria");

                    b.HasKey("IdCategoria")
                        .HasName("PK__categori__CD54BC5AE74B909F");

                    b.ToTable("categoria", (string)null);
                });

            modelBuilder.Entity("MotorBike.Models.Cliente", b =>
                {
                    b.Property<int>("IdCliente")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_cliente");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCliente"), 1L, 1);

                    b.Property<string>("DireccionCliente")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("direccion_cliente");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .IsUnicode(false)
                        .HasColumnType("varchar(150)")
                        .HasColumnName("email");

                    b.Property<string>("NombreCliente")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("nombre_cliente");

                    b.Property<string>("TelefonoCliente")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("telefono_cliente");

                    b.HasKey("IdCliente")
                        .HasName("PK__clientes__677F38F59C6AC395");

                    b.ToTable("clientes", (string)null);
                });

            modelBuilder.Entity("MotorBike.Models.Compra", b =>
                {
                    b.Property<int>("IdCompra")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_compra");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCompra"), 1L, 1);

                    b.Property<DateTime?>("FechaCompra")
                        .HasColumnType("date")
                        .HasColumnName("fecha_compra");

                    b.Property<int>("PrecioFinal")
                        .HasColumnType("int")
                        .HasColumnName("precio_final");

                    b.HasKey("IdCompra")
                        .HasName("PK__compras__C4BAA604D5948067");

                    b.ToTable("compras", (string)null);
                });

            modelBuilder.Entity("MotorBike.Models.CompraXRepuesto", b =>
                {
                    b.Property<int>("IdCompraXRepuesto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_compra_x_repuesto");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdCompraXRepuesto"), 1L, 1);

                    b.Property<int>("Cantidad")
                        .HasColumnType("int")
                        .HasColumnName("cantidad");

                    b.Property<int>("FkCategoria")
                        .HasColumnType("int")
                        .HasColumnName("fk_categoria");

                    b.Property<int>("FkCompra")
                        .HasColumnType("int")
                        .HasColumnName("fk_compra");

                    b.Property<int>("FkRepuesto")
                        .HasColumnType("int")
                        .HasColumnName("fk_repuesto");

                    b.Property<int>("PrecioFinal")
                        .HasColumnType("int")
                        .HasColumnName("precio_final");

                    b.Property<int>("PrecioUnitario")
                        .HasColumnType("int")
                        .HasColumnName("precio_unitario");

                    b.Property<int>("Subtotal")
                        .HasColumnType("int")
                        .HasColumnName("subtotal");

                    b.HasKey("IdCompraXRepuesto")
                        .HasName("PK__compra_x__9AE7DA60D74DA705");

                    b.HasIndex("FkCategoria");

                    b.HasIndex("FkCompra");

                    b.HasIndex("FkRepuesto");

                    b.ToTable("compra_x_repuesto", (string)null);
                });

            modelBuilder.Entity("MotorBike.Models.Mecanico", b =>
                {
                    b.Property<int>("IdMecanico")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_mecanico");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdMecanico"), 1L, 1);

                    b.Property<string>("Cedula")
                        .IsRequired()
                        .HasMaxLength(12)
                        .IsUnicode(false)
                        .HasColumnType("varchar(12)")
                        .HasColumnName("cedula");

                    b.Property<string>("DireccionMecanico")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("direccion_mecanico");

                    b.Property<string>("NombreMecanico")
                        .IsRequired()
                        .HasMaxLength(200)
                        .IsUnicode(false)
                        .HasColumnType("varchar(200)")
                        .HasColumnName("nombre_mecanico");

                    b.Property<string>("TelefonoMecanico")
                        .IsRequired()
                        .HasMaxLength(15)
                        .IsUnicode(false)
                        .HasColumnType("varchar(15)")
                        .HasColumnName("telefono_mecanico");

                    b.HasKey("IdMecanico")
                        .HasName("PK__mecanico__3228572C1E6045AF");

                    b.ToTable("mecanicos", (string)null);
                });

            modelBuilder.Entity("MotorBike.Models.Repuesto", b =>
                {
                    b.Property<int>("IdRepuesto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_repuesto");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdRepuesto"), 1L, 1);

                    b.Property<int>("Cantidad")
                        .HasColumnType("int")
                        .HasColumnName("cantidad");

                    b.Property<int>("FkCategoria")
                        .HasColumnType("int")
                        .HasColumnName("fk_categoria");

                    b.Property<string>("NombreRepuesto")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nombre_repuesto");

                    b.Property<int>("Precio")
                        .HasColumnType("int")
                        .HasColumnName("precio");

                    b.HasKey("IdRepuesto")
                        .HasName("PK__repuesto__9D97D13F91737E28");

                    b.HasIndex("FkCategoria");

                    b.ToTable("repuestos", (string)null);
                });

            modelBuilder.Entity("MotorBike.Models.Servicio", b =>
                {
                    b.Property<int>("IdServicio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_servicio");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdServicio"), 1L, 1);

                    b.Property<string>("Descripcion")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("descripcion");

                    b.Property<string>("NombreServicio")
                        .IsRequired()
                        .HasMaxLength(100)
                        .IsUnicode(false)
                        .HasColumnType("varchar(100)")
                        .HasColumnName("nombre_servicio");

                    b.HasKey("IdServicio")
                        .HasName("PK__servicio__6FD07FDC3784A3AE");

                    b.ToTable("servicios", (string)null);
                });

            modelBuilder.Entity("MotorBike.Models.Venta", b =>
                {
                    b.Property<int>("IdVenta")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_venta");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdVenta"), 1L, 1);

                    b.Property<DateTime?>("FechaVenta")
                        .HasColumnType("date")
                        .HasColumnName("fecha_venta");

                    b.Property<int>("PrecioFinal")
                        .HasColumnType("int")
                        .HasColumnName("precio_final");

                    b.HasKey("IdVenta")
                        .HasName("PK__venta__459533BF5899F3F6");

                    b.ToTable("ventas", (string)null);
                });

            modelBuilder.Entity("MotorBike.Models.VentaXRepuesto", b =>
                {
                    b.Property<int>("IdVentaXRepuesto")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id_venta_x_repuesto");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IdVentaXRepuesto"), 1L, 1);

                    b.Property<int>("Cantidad")
                        .HasColumnType("int")
                        .HasColumnName("cantidad");

                    b.Property<int>("FkCategoria")
                        .HasColumnType("int")
                        .HasColumnName("fk_categoria");

                    b.Property<int>("FkCliente")
                        .HasColumnType("int")
                        .HasColumnName("fk_cliente");

                    b.Property<int>("FkMecanico")
                        .HasColumnType("int")
                        .HasColumnName("fk_mecanico");

                    b.Property<int>("FkRepuesto")
                        .HasColumnType("int")
                        .HasColumnName("fk_repuesto");

                    b.Property<int>("FkServicio")
                        .HasColumnType("int")
                        .HasColumnName("fk_servicio");

                    b.Property<int>("FkVenta")
                        .HasColumnType("int")
                        .HasColumnName("fk_venta");

                    b.Property<int>("PrecioFinal")
                        .HasColumnType("int")
                        .HasColumnName("precio_final");

                    b.Property<int>("PrecioManoObra")
                        .HasColumnType("int")
                        .HasColumnName("precio_mano_obra");

                    b.Property<int>("PrecioUnitario")
                        .HasColumnType("int")
                        .HasColumnName("precio_unitario");

                    b.Property<int>("Subtotal")
                        .HasColumnType("int")
                        .HasColumnName("subtotal");

                    b.HasKey("IdVentaXRepuesto")
                        .HasName("PK__venta_x___AA09E4D69E25184C");

                    b.HasIndex("FkCategoria");

                    b.HasIndex("FkCliente");

                    b.HasIndex("FkMecanico");

                    b.HasIndex("FkRepuesto");

                    b.HasIndex("FkServicio");

                    b.HasIndex("FkVenta");

                    b.ToTable("venta_x_repuestos", (string)null);
                });

            modelBuilder.Entity("MotorBike.Models.ApplicationUser", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<string>("Firstname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Lastname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasDiscriminator().HasValue("ApplicationUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MotorBike.Models.CompraXRepuesto", b =>
                {
                    b.HasOne("MotorBike.Models.Categorium", "FkCategoriaNavigation")
                        .WithMany("CompraXRepuestos")
                        .HasForeignKey("FkCategoria")
                        .IsRequired()
                        .HasConstraintName("FK__compra_x___fk_ca__6C190EBB");

                    b.HasOne("MotorBike.Models.Compra", "FkCompraNavigation")
                        .WithMany("CompraXRepuestos")
                        .HasForeignKey("FkCompra")
                        .IsRequired()
                        .HasConstraintName("FK__compra_x___fk_co__6B24EA82");

                    b.HasOne("MotorBike.Models.Repuesto", "FkRepuestoNavigation")
                        .WithMany("CompraXRepuestos")
                        .HasForeignKey("FkRepuesto")
                        .IsRequired()
                        .HasConstraintName("FK__compra_x___fk_re__6D0D32F4");

                    b.Navigation("FkCategoriaNavigation");

                    b.Navigation("FkCompraNavigation");

                    b.Navigation("FkRepuestoNavigation");
                });

            modelBuilder.Entity("MotorBike.Models.Repuesto", b =>
                {
                    b.HasOne("MotorBike.Models.Categorium", "FkCategoriaNavigation")
                        .WithMany("Repuestos")
                        .HasForeignKey("FkCategoria")
                        .IsRequired()
                        .HasConstraintName("FK__repuesto__precio__68487DD7");

                    b.Navigation("FkCategoriaNavigation");
                });

            modelBuilder.Entity("MotorBike.Models.VentaXRepuesto", b =>
                {
                    b.HasOne("MotorBike.Models.Categorium", "FkCategoriaNavigation")
                        .WithMany("VentaXRepuestos")
                        .HasForeignKey("FkCategoria")
                        .IsRequired()
                        .HasConstraintName("FK__venta_x_r__fk_ca__70DDC3D8");

                    b.HasOne("MotorBike.Models.Cliente", "FkClienteNavigation")
                        .WithMany("VentaXRepuestos")
                        .HasForeignKey("FkCliente")
                        .IsRequired()
                        .HasConstraintName("FK__venta_x_r__fk_cl__74AE54BC");

                    b.HasOne("MotorBike.Models.Mecanico", "FkMecanicoNavigation")
                        .WithMany("VentaXRepuestos")
                        .HasForeignKey("FkMecanico")
                        .IsRequired()
                        .HasConstraintName("FK__venta_x_r__fk_me__72C60C4A");

                    b.HasOne("MotorBike.Models.Repuesto", "FkRepuestoNavigation")
                        .WithMany("VentaXRepuestos")
                        .HasForeignKey("FkRepuesto")
                        .IsRequired()
                        .HasConstraintName("FK__venta_x_r__fk_re__71D1E811");

                    b.HasOne("MotorBike.Models.Servicio", "FkServicioNavigation")
                        .WithMany("VentaXRepuestos")
                        .HasForeignKey("FkServicio")
                        .IsRequired()
                        .HasConstraintName("FK__venta_x_r__fk_se__73BA3083");

                    b.HasOne("MotorBike.Models.Venta", "FkVentaNavigation")
                        .WithMany("VentaXRepuestos")
                        .HasForeignKey("FkVenta")
                        .IsRequired()
                        .HasConstraintName("FK__venta_x_r__fk_ve__6FE99F9F");

                    b.Navigation("FkCategoriaNavigation");

                    b.Navigation("FkClienteNavigation");

                    b.Navigation("FkMecanicoNavigation");

                    b.Navigation("FkRepuestoNavigation");

                    b.Navigation("FkServicioNavigation");

                    b.Navigation("FkVentaNavigation");
                });

            modelBuilder.Entity("MotorBike.Models.Categorium", b =>
                {
                    b.Navigation("CompraXRepuestos");

                    b.Navigation("Repuestos");

                    b.Navigation("VentaXRepuestos");
                });

            modelBuilder.Entity("MotorBike.Models.Cliente", b =>
                {
                    b.Navigation("VentaXRepuestos");
                });

            modelBuilder.Entity("MotorBike.Models.Compra", b =>
                {
                    b.Navigation("CompraXRepuestos");
                });

            modelBuilder.Entity("MotorBike.Models.Mecanico", b =>
                {
                    b.Navigation("VentaXRepuestos");
                });

            modelBuilder.Entity("MotorBike.Models.Repuesto", b =>
                {
                    b.Navigation("CompraXRepuestos");

                    b.Navigation("VentaXRepuestos");
                });

            modelBuilder.Entity("MotorBike.Models.Servicio", b =>
                {
                    b.Navigation("VentaXRepuestos");
                });

            modelBuilder.Entity("MotorBike.Models.Venta", b =>
                {
                    b.Navigation("VentaXRepuestos");
                });
#pragma warning restore 612, 618
        }
    }
}
